/*

    Autoimpedance driver for the electric imp
    
    USAGE:

*/

class ZSensor {

    // i2c object
    _i2c  = null;
	_clock = null;
    
    // Shift 7-bit address to 8-bit address required by the imp
    static ADDRESS = 0x0D << 1;
    
    // User changeable parameters
    numSteps = null;
    startHz = null;
    incHz = null;
    numCyc = null;
    voltage = null;
    gain = null;
    clkSrc = null;
    
    // Calibration parameters
    static Ri2v = 100e3; // This is the value of the current to voltage resistor on the board
    calType = null;
    gainFac1 = null;
    gainFac2F0 = null;
    gainFac2M = null;
    gainFac2B = null;
    
    // Internal variables
    currHz = null; // The currently tested frequency
    ctl = null; // 16-bit control register
    cyc = null; // 16-bit no. cycles register
    
    // Results
    zR = null; // Real impedance component
    zI = null; // Imaginary impedance component
    ohm = null; // Impedance magnitude
    rad = null; // Relative phase
    tempR = null; // Temperature register
    tempC = null; // Ambient device temp in deg. C
    tempK = null; // Ambient device temp in K
    
    // Construct the  Object
    constructor(i2c, clock) {
        _i2c  = i2c;
		_clock = clock;
		
		// Default sweep values
		numSteps = 10;
        startHz = 5e3;
        incHz = 1e3;
        numCyc = 1; 
        
        // Default voltage
        voltage = 0.2;
        
        // PGA Gain
        gain = 1;
        
        // Default register values
        ctl = 0xA000; // power-down mode
        cyc = 0x0001; // 1 cycle
        tempR = 0;
        
        // Zero the measurements
        zR = 0;
        zI = 0;
        ohm = 0;
        rad = 0;

        // Set clock source to external
        setClkSrc("external");
    }

    function setSweep() {
        
        // Start frequency
        local D = getFreqCode(startHz);
        _i2c.write(ADDRESS, "\x82" + (D >> 16).tochar()); 
        _i2c.write(ADDRESS, "\x83" + (D >> 8).tochar()); 
        _i2c.write(ADDRESS, "\x84" + D.tochar()); 
        
        // Frequency increment
        D = getFreqCode(incHz);
        _i2c.write(ADDRESS, "\x85" + (D >> 16).tochar()); 
        _i2c.write(ADDRESS, "\x86" + (D >> 8).tochar()); 
        _i2c.write(ADDRESS, "\x87" + D.tochar()); 
        
        // Number of steps
        D = numSteps;
        _i2c.write(ADDRESS, "\x88" + (D >> 8).tochar()); 
        return _i2c.write(ADDRESS, "\x89" + D.tochar()); 
    }
    
    function standby() {
        
        // Standby command
        ctl = (ctl & ~(0xF0 << 8)) | 0xB0 << 8;
        return _i2c.write(ADDRESS, "\x80" + (ctl >> 8).tochar());
    }
    
    function initStartFreq() {
        
        // Intialize the test line using the start frequency
        ctl = (ctl & ~(0xF0 << 8)) | 0x10 << 8;
        return _i2c.write(ADDRESS, "\x80" + (ctl >> 8).tochar()); 
    }
    
    function startSweep() {
        
        // Set the current frequency
        currHz = startHz;
        
        // Start sweep command
        ctl = (ctl & ~(0xF0 << 8)) | 0x20 << 8;
        return _i2c.write(ADDRESS, "\x80" + (ctl >> 8).tochar()); 
    }
    
    function incrementFreq() {
        
        // Increment the current frequency
        currHz += incHz;
        
        // Increment frequency command
        ctl = (ctl & ~(0xF0 << 8)) | 0x30 << 8;
        return _i2c.write(ADDRESS, "\x80" +(ctl >> 8).tochar()); 
    }
    
    function repeatFreq() {
        
        // Repeat frequency command
        ctl = (ctl & ~(0xF0 << 8)) | 0x40 << 8;
        return _i2c.write(ADDRESS, "\x80" + (ctl >> 8).tochar()); 
    }
    
    function measureTemp() {
        
        // Repeat frequency command
        ctl = (ctl & ~(0xF0 << 8)) | 0x90 << 8;
        return _i2c.write(ADDRESS, "\x80" + (ctl >> 8).tochar()); 
    }
    
    function powerDown() {
        
        // Power-down command
        ctl = (ctl & ~(0xF0 << 8)) | 0xA0<< 8;
        return _i2c.write(ADDRESS, "\x80" + (ctl >> 8).tochar()); 
    }

    function getFreqCode(fHz) {
        
        // Covert to 24-bit code
        if (clkSrc == "internal") {
            local value = math.floor((fHz.tofloat() / 4.0e6) * math.pow(2,27));
    		return (value.tointeger() & 0x00FFFFFF);
        }
        else if (clkSrc == "external") {
            local value = math.floor((fHz.tofloat() / (_clock.freqHz / 4.0)) * math.pow(2,27));
    		return (value.tointeger() & 0x00FFFFFF);
        }
        else {
            
            // Invalid clock source
            return -1;
        }
    }
    
    function setPGAGain(K) {
    
        if (K == 1) {
            
            // 1X gain
            gain = K;
            ctl = (ctl & ~(0x01 << 8)) | (1 << 8);
        }
        else if(K == 5) {
            
            // 5X gain
            gain = K;
            ctl = (ctl & ~(0x01 << 8)) | (0 << 8);
        }
        else {
            return -1;
        }
        
        return _i2c.write(ADDRESS, "\x80" + (ctl >> 8).tochar()); 
    }
    
    function reset() {
        
        // Reset the current frequency
        currHz = startHz;
    
        ctl = (ctl & ~(0x10)) | 0x10;
        return _i2c.write(ADDRESS, "\x81" + ctl.tochar()); 
    }
    
    function setClkSrc(src) {
    
        if (src == "internal") {
           
            ctl = (ctl & ~(0x08)) | 0x00; 
        }
        else if (src == "external") {
            
            ctl = (ctl & ~(0x08)) | 0x08;
        }
        else {
            
            // Invalid source
            return -1;
        }
        
        // Log the clock source
        clkSrc = src;
        
        // Update the chip
        return _i2c.write(ADDRESS, "\x81" + ctl.tochar()); 
    }
    
    function setStartHz(fHz){
        
        if (fHz < 0) {
            return -1;
        }
        else {
            
            startHz = fHz;
            
            // Success
            return 0;
        }
    }
    
    function setIncHz(fHz){
        
        if (fHz < 0) {
            return -1;
        }
        else {
            
            incHz = fHz;
            
            // Success
            return 0;
        }
    }
    
    function setNumSteps(n){
        
        if (n < 0 || n > 511) {
            return -1;
        }
        else {
            
            numSteps = n;
            
            // Success
            return 0;
        }
    }
    
    function setVoltage(v) {
        
        // Never set voltage _higher_ than requested by user
        if (v > 0 && v < 0.4) {
            
            // 200 mV command
            ctl = (ctl & ~(0x06 << 8)) | 1 << 9;
            voltage = 0.2;
        }
        else if (v >= 0.4 && v < 1.0) {
            
            // 400 mV command
            ctl = (ctl & ~(0x06 << 8)) | 2 << 9;
            voltage = 0.4;
        }
        else if (v >= 1.0 && v < 2.0) {
            
            // 1 V command
            ctl = (ctl & ~(0x06 << 8)) | 3 << 9;
            voltage = 1.0;
        }
        else if (v == 2.0) {
            
            // 2 V command
            ctl = (ctl & ~(0x06 << 8)) | 0 << 9;
            voltage = 2.0;
        }
        else {
            
            // Invalid voltage requested
            return -1;
        }
        
        // Set the voltage on the chip
        return _i2c.write(ADDRESS, "\x80" + (ctl >> 8).tochar());
    }
    
    function setNumSettleCycles(n) {
        
        if (n > 0 && n <= 511) {
            
            // Set number of cycles register to n
            cyc = (cyc & ~(0x01 << 8)) | (n >> 8);
            cyc = (cyc & ~(0x0F)) | n;
            
            // Record the value
            numCyc = n;
            
            // Set the number of cycles on the chip
            _i2c.write(ADDRESS, "\x8A" + (cyc >> 8).tochar());
            return _i2c.write(ADDRESS, "\x8B" + cyc.tochar()); 
        }
        else {
            
            // Invalid number of cycles
            return -1;
        }
    }
    
    function queryStatus() {
        /*
		Returns the current status register value
		
        Inputs:
            which: string representing the register you would like to
            know the status of. (available options; "temp","z","sweep")
        
        Returns:
            Status register value:  0; not done
                                    1; valid temp measurement
                                    2; Valid real/imag data
                                    3; Frequency sweep complete
        */
        
        if (setReadAddress(0x8F) == 0) {
            local status = _i2c.read(ADDRESS,"",1)[0];
            return status & 0x07;
        }
        else {
            
            // Could not set address pointer
            return -1;
        }
    }
    
    function setReadAddress(address) {
        
        // Set the address pointer to a particular register address to prepare 
        // for a one-shot read.
        return _i2c.write(ADDRESS, "\xB0" + address.tochar());
    }
    
    function readRegister (register) {
        
        setReadAddress(register);
        local data = _i2c.read(ADDRESS, "\xA0\x02", 2);
        local result = data[0] << 8 | data[1];
        return result;
        
    }
    
    function getZ() {
        
        // Set the read address and read the data in that address
        zR = 0;
        zI = 0;
        
        setReadAddress(0x94);
        local data = _i2c.read(ADDRESS, "\xA0\x04", 4);
        zR = data[0] << 8 | data[1];
        zI = data[2] << 8 | data[3];
        
        // zR = _i2c.read(ADDRESS, "\xA0\x04", 1)[0].tointeger() << 8;
        
        // //server.log(zR);

        // setReadAddress(0x95);
        // zR = zR |  _i2c.read(ADDRESS, "", 1)[0].tointeger();
        
        // //server.log(zR);

        // setReadAddress(0x96);
        // zI = _i2c.read(ADDRESS, "", 1)[0].tointeger() << 8;
        
        // //server.log(zI);
            
        // setReadAddress(0x97);
        // zI = zI | _i2c.read(ADDRESS, "", 1)[0].tointeger();
        
        //server.log(zI);

        // Twos complement conversion
        zR = -((zR & 0x8000) >> 15) * 32768 + (zR & 0x7FFF);
        zI = -((zI & 0x8000) >> 15) * 32768 + (zI & 0x7FFF);
        
        server.log(zR);
        server.log(zI);
        
        // Success
        return 0;
 
    }
    
    function convertZ () {
        
        if (calType == "1-point") {
            
            // Use calibration factor to determine true impedance
            local mag = math.sqrt(math.pow(zR,2).tofloat() + math.pow(zI,2).tofloat());
            ohm = 1/(gainFac1 * mag);
            
            // Success
            return 0;
        }
        else if (calType == "2-point") {
            
            // Get the frequency-dependent gain factor
            local k = gainFac2M * (currHz - gainFac2F0) + gainFac2B;
            
            // Use calibration factor to determine true impedance
            local mag = math.sqrt(math.pow(zR,2).tofloat() + math.pow(zI,2).tofloat());
            ohm = 1/(k * mag);
            
            // Success
            return 0;
            
        }
        else {
            return -1;
        }
        
    }
    
    function get1PCal(zKnown, fHz) {
        
        // Set the calibration type to 1-point
        calType = "1-point";
        
        // Temporarily set the start frequency to fHz
        local oldStartHz = startHz;
        local oldIncHz = incHz;
        local oldNumSteps = numSteps;
        
        // Do a single frequency, temporarily
        setStartHz(fHz);
        setIncHz(0);
        setNumSteps(0);
        setSweep();
        setNumSettleCycles(100)
        
        // Start the sweep (only the first frequency will be performed)
        standby();
        initStartFreq();
        startSweep();
        local status = queryStatus();
        while ((status & 0x02) != 2) {
            imp.sleep(0.1);
            status = queryStatus();
        }
    
        // Valid real/image data
        getZ();
        
        // Cancel the sweep and revert to previously selected parameters
        reset();
        setStartHz(oldStartHz);
        setIncHz(oldIncHz);
        setNumSteps(oldNumSteps);
        setSweep();
        
        // Put the chip in standby mode
        standby();
        
        // Calculate the gain factor
        local mag = math.sqrt(math.pow(zR,2).tofloat() + math.pow(zI,2).tofloat());
        server.log(mag);
        
        gainFac1 = 1/(zKnown * mag);
        
        server.log(gainFac1);
        
        // Success
        return 0;
    }
    
    function get2PCal(zKnown, fHz0, fHz1) {
        
        // Run 1-point cal 2X at each requested frequency to get the gain factor
        // for each.
        
        if (fHz1 > fHz0) {
        
            get1PCal(zKnown, fHz0);
            local k0 = gainFac1;
            get1PCal(zKnown, fHz1);
            local k1 = gainFac1;
            
            gainFac2F0 = fHz0.tofloat();
            gainFac2M = (k1-k0)/(fHz1-fHz0).tofloat();
            gainFac2B = k0;
            
            // Set the calibration type to 2-point
            calType = "2-point";
            
            // Success
            return 0;
        }
        else {
        
            // fHz1 must be larger than fHz0
            return -1;
        }
    }
        
    function getTemp() {
        
        // Issue measure temperature command
        if (measureTemp() != 0) {
            
            // Failed to set control register
            return -1;
        }
        
        // Wait for valid temperature result
        while((queryStatus() & 0x01) != 1) {
            imp.sleep(0.001);
        }
        
        // Read temperature result
        setReadAddress(0x92);
        tempR = (tempR & ~(0xFF00)) | _i2c.read(ADDRESS, "", 1)[0] << 8;
        
        setReadAddress(0x93);
        tempR = (tempR & ~(0x00FF)) | _i2c.read(ADDRESS, "", 1)[0];

        // Convert 13-bit temp meausrement to C/K
        if ((tempR & 0x02000000) == 0) {
            
            // This is a positive value
            tempC = (tempR & 0x03FFFFFF).tofloat()/32.0;
            tempK = tempC + 273.15;
        } 
        else { 
            
            // This is a negative value
            tempC = ((tempR & 0x03FFFFFF).tofloat() - 8192.0)/32.0;
            tempK = tempC + 273.15;
        }
        
        // Success
        return 0;
    }
}

class Pot {

    // i2c object
    _i2c  = null;
    
    // Shift 7-bit address to 8-bit address required by the imp
    static ADDRESS = 0x2D << 1;
    
    // Resistances of wiper switch and A --> B terminals
    static Rw   = 50;
    static Rab  = 100e3;
    
    // True A --> W resistance
    Raw = null;

    // Construct the Object
    constructor(i2c) {
        _i2c  = i2c;
    }
    
    function setR(R) {
	    /*
		Sets the A --> W resistance
		
        Inputs:
            R: Resistance value, in ohms, less than 100k
        
        Returns:
            i2c.write error code
        */
        
        if (R > Rab) {
            return -1;
        }
        else {
            
            // Get data register value
            local D = 256.0 + 256.0*(2.0*Rw - R)/Rab;
            
            // Log the true clock  A -> W resistance
            Raw = Rab*(256.0 - math.floor(D))/256.0 + 2*Rw;
            
            // Configure the resistance from A -> W terminals
            return _i2c.write(ADDRESS, "\00" + D.tochar());
        }
    }
}

class Clock {

    // i2c object
    _i2c  = null;
    
    // Shift 7-bit address to 8-bit address required by the imp
    static ADDRESS  = 0x17 << 1;
    
    // Output configuration; 2 = CLK only
    static POW = 2; 
    
    // Current frequency setting
    freqHz = null;
    
    // Construct the Object
    constructor(i2c) {
        _i2c  = i2c;
        
        // Default power up freq of LTC690x
        freqHz =1.039e3;
    }
    
    function setHz(fHz) {
        /*
		Sets the clock frequency
		
        Inputs:
            fHz: integer specifying oscillator frequency, e.g. 50e3 for 50 kHz
        
        Returns:
            i2c.write error code
        */
        
        if (fHz <= 1e3 || fHz > 68e6) {
            return -1;
        }
        else {
            
            // Calculate the OCT and DAC register values
            local oct = math.floor(3.322*math.log10(fHz/1039.0),0).tointeger();
            local dac = round(2048.0-(2078.0*math.pow(2,10.0 + oct))/fHz,0).tointeger();
            
		    // Log the true clock frequency
		    freqHz = math.pow(2,oct.tofloat())*(2078.0/(2-dac.tofloat()/1024.0));
        
            // Configure the clock frequency
            local D = oct << 12 | dac << 2 | POW;
            return _i2c.write(ADDRESS, (D >> 8).tochar() + D.tochar()); 
        }
  
    }
    
    function round(val, decimalPoints) {
        local f = math.pow(10, decimalPoints) * 1.0;
        local newVal = val * f;
        newVal = math.floor(newVal + 0.5)
        return (newVal * 1.0) / f;
    }
}

class ShiftReg {
    
    // Serial, RClock, and SClock pins
    ser = null;
    rck = null; 
    sck = null; 
    
    // Output register
    out = 0
    // Register bit meanings
    // b0-3:    MUX16 address
    // b4:      0:  MUX16A      1: MUX16B
    // b5-6     00: Ztest       11: Plate mode
    // b7       0:  Plate off   1: Plate on
    
    // Construct the Object
    constructor() {
        
        hardware.pin2.configure(DIGITAL_OUT);
        hardware.pin5.configure(DIGITAL_OUT);
        hardware.pin7.configure(DIGITAL_OUT);
        
        rck = hardware.pin2;
        sck = hardware.pin5;
        ser = hardware.pin7;
        
        // Bring RClock and SClock HIGH to start
        rck.write(1);
        sck.write(1);
        
        // Zero the output pins
        clear();

    }
    
    function clear() {
        /*
		Clears the 8-bit output state of the 74HC95 register
		
        Inputs:
            N/A
        
        Returns:
            N/A
        */
        
        setByte(0);
    }
    
    function setByte(byte) {
        /*
		Sets the 8-bit state register of the 74HC95
		
        Inputs:
            Byte: byte specifying parallel port state, e.g. 170 = 10101010
        
        Returns:
            Error code
        */
        
        if (byte > 255) {
            
            // Value too large
            return -1;
        }
        else {
            
            out = byte;
            
            // Success
            return 0;
        }   
            
    }
    
    function setBit(idx, val) {
        /*
		Sets a single specified bit within the 8-bit state register of the 74HC95
		
        Inputs:
            idx: position of bit to apply val; 0 though 7
            val: value of position idx; 0 or 1
            
        Returns:
            Error code
        */
        
        if (idx > 7 || idx < 0) {
            
            // idx too large or negative
            return -1;
        }
        else {
            
            if (val > 1 || val < 0) {
                
                // Val must be 0 or 1
                return -1;
            }
            else {
                
                // Set single bit
                out = (out & ~(1 << idx)) | val << idx;

                // Success
                return 0;
            }


        } 
        
    }
    
    function update() {
        /*
		Updates the output pins of the 74HC95 based upon the value of this.out
		
        Inputs:
            N/A
        
        Returns:
            N/A
        */
        
        rck.write(0);
            
        for (local idx = 7; idx >= 0; idx -= 1) {
            
            sck.write(0);
            ser.write(out >> idx & 1);
            sck.write(1);
        }
        
        rck.write(1);
    }

}

class Mux {
    
    // Shift register object
    _sr  = null;
    
    // Construct the Object
    constructor(sr) {
        _sr  = sr;
    }
    
    function setMode(mode) {
        /*
		Sets the mode of the autoimpedance board. Available modes are impedance
		testing and plating modes.
		
        Inputs:
            mode:   "ztest" to select impedance testing mode
                    "plate" to select plating mode
            
        Returns:
            Error code
        */

        switch (mode) {
            case "ztest":
                _sr.setBit(5, 0);
                _sr.setBit(6, 0);
                _sr.update();
                break;
            
            case "plate":
                _sr.setBit(5, 1);
                _sr.setBit(6, 1);
                _sr.update();
                break;
                
            default:
                sq_throwerror(mode,"invalid mode.");
                return -1;
        }

        // Success
        return 0;
    }
    
    function plate(t) {
        /*
		Delivers DC current to the currently selected electrode. The amount of 
		current delivered depends on the settings of a previously devied ISrc object.
		
        Inputs:
            t: Time, in seconds, that current should be delivered for.
            
        Returns:
            Error code
        */
        
        // Make sure we are in plating mode
        setMode("plate");
        
        // Deliver current for specified time period
        _sr.setBit(7,1);
        _sr.update();
        imp.sleep(t);
        _sr.setBit(7,0);
        _sr.update();
        
         // Success
        return 0;
        
    }
    
    function setChannel(chan) {
        /*
		Selects the channel to be measured or plated.
		
        Inputs:
            chan: Channel number; 0-31
            
        Returns:
            Error code
        */
        
        if (chan >= 32 || chan < 0) {
            
            // Channel number is too high or negative
            return -1;   
        }
        else {
            
            // Select which MUX16 to use and set the local address
            if (chan <= 15) {
                _sr.setBit(4, 1) // MUX16a
                _sr.out = (_sr.out & ~0x0F) | chan;
            }
            else {
                _sr.setBit(4, 0) // MUX16b
                _sr.out = (_sr.out & ~0x0F) | (chan - 16);
            }

            _sr.update();
            
            // Success
            return 0;
        }
    }
}

class ISrc {
    
    _pot = null;
    _zsensor = null;
    
    // User parameters
    iset = null;
    
    constructor(pot, zsensor) {
        _pot = pot;
        _zsensor = zsensor;
    }
    
    function setI(i) {
        /*
		Sets the temperature-compenstated output of the onboard LM324 current source.
		
        Inputs:
            i: Required current in uA
            
        Returns:
            Error code
        */
        
        // Update the temperature measurement in the vacinity of LM324
        zsensor.getTemp();
        
        // Set the current output 
        local R = (227.0 * zsensor.tempK)/(i.tofloat());
        _pot.setR(R);
        
        // Log the current iset value
        iset = (227.0 * zsensor.tempK)/_pot.Raw;
        
        // Success
        return 0;
    }
}


/////////// PLAYGROUND //////////

// Configure i2c bus
hardware.i2c89.configure(CLOCK_SPEED_100_KHZ);

// Assign globals
pot <- Pot(hardware.i2c89);
clock <- Clock(hardware.i2c89);
zsensor <- ZSensor(hardware.i2c89,clock);
sr <- ShiftReg();
mux <- Mux(sr);
isrc <- ISrc(pot,zsensor);


server.log("Autoimpedance is running...");

/* 
IMPEDANCE MEASUREMENT TEST
*/

local ch = 23;

// server.log(clock.setHz(1e6)); 
// server.log(mux.setMode("ztest"));
// server.log(mux.setChannel(ch));
// server.log(zsensor.standby());
// server.log(zsensor.setClkSrc("external"));
// server.log(zsensor.setVoltage(0.2));
// server.log(zsensor.setPGAGain(5));

// // Calibration factor calculations
// zsensor.get1PCal(1000e3,50000);
// //zsensor.get2PCal(680e3,900,1100);
// server.log(zsensor.convertZ());
// server.log(zsensor.ohm);

// // Program sweep parameter
// server.log(zsensor.setStartHz(50000));
// server.log(zsensor.setIncHz(100));
// server.log(zsensor.setNumSteps(0));
// server.log(zsensor.setNumSettleCycles(100));
// server.log(zsensor.setSweep());
// server.log(zsensor.ctl);
server.log(zsensor.readRegister(0x80));

//local volts = [0.2,0.4,1,2];


// for (local i = 0; i < 32; i++) {
    
//     //server.log(zsensor.setVoltage(volts[i]));
    
//     server.log(mux.setChannel(i));
//     zsensor.initStartFreq();
//     zsensor.startSweep();
    
//     local status = zsensor.queryStatus();
//     while ((status & 0x04) != 0x04) {
//         while ((status & 0x02) != 0x02) {
//             imp.sleep(0.1);
//             status = zsensor.queryStatus();
//         }
        
//         // Valid real/imaginary data
//         zsensor.getZ();
//         zsensor.convertZ();
//         server.log(zsensor.ohm);
//         server.log("--");
        
//         // Increment frequency
//         zsensor.incrementFreq();
//         status = zsensor.queryStatus();
//     }
    
//     zsensor.reset();
    
//     //zsensor.getTemp();
//     //server.log(zsensor.tempC);
// }

server.log(zsensor.powerDown());


// // Two-point gain factor calculation 
// fHz0 = 500;
// fHz1 = 1500;
// zCal = 680e3;



/* 
PLATING TEST
*/

// // TODO: the actual current source seems to be inversely related to the the 
// // required amount of current for some reason. 
// // TODO: There is some strange behavior where once the AD5933 takes a temperature
// // measurement (needed to set current), it gets 'stuck' in that mode, unable to make
// // and impedance measure. This could have to do with muxes getting stuck in the
// // plating position too, though. Fixing requires power cycle.
//
// server.log(isrc.setI(10)); 
// server.log(isrc.iset);
// server.log(mux.plate(3));

// server.log(isrc.setI(100));
// server.log(isrc.iset);
// server.log(mux.plate(3));

// server.log(isrc.setI(10000));
// server.log(isrc.iset);
// server.log(mux.plate(3));



